## 데이터 생성
로그 시뮬레이터를 이용해 오늘 날짜의 “스마트카 상태 정보 데이터를 생성
날짜: 2022년 4월 28일이었고 5대의 스마트카를 지정

저사양 파일럿 환경: 플럼 서비스를 시작한다.
플럼 서비스: CM 홈 → [Flume] - [시작]
$ cd /home/pilot-pjt/working
$ java -cp bigdata. smartcar.loggen-1.0.jar com.wikibook.bigdata.smartcar.loggen.CarLogMain 20220428 5 &

파일이 100MB 파일 크기로 생성된 것을 확인한 후, 로그 시뮬레이터를 종료한다.
$ cd /home/pilot-pjt/working/SmartCar/
$ ls -ltrh SmartCarStatus Info_20200322.txt
$ ps -ef | grep smartcar.log
$ kill -9 [pid]

## 데이터 적재
스마트카 상태 정보 데이터를 플럼의 수집 디렉터리로 옮긴다. 플럼이 수집 작업을 시작한다.
$ mv /home/pilot-pjt/working/SmartCar/SmartCarStatus Info_20200322. txt /home/pilot-pjt/working/car-batch-log/

## 데이터 적재 확인
오늘 날짜의 스마트카 상태 정보가 HDFS에 정상적으로 적재됐는지 확인한다.
$ hdfs dfs -ls -R /pilot-pit/collect/car-batch-log/
wrk_date=20220428 확인
디렉터리 아래에 .tmp인 파일이 있으면 아직 플럼에서 적재 중이니 완료될 때까지 기다린다.

## 운전자 운행로그 생성
플럼, 카프카, 스톰, 레디스, Hbase 서버가 정상 상태인지 먼저 확인하도록 한다. 
특히 스톰의 경우 자동 스타트가 안 되는 경우가 많으니 스톰의 Ninbus와 Supervisor의 기동 상태를 꼭 확인해 본다.
플럼 서비스: CM 홈 → [Flume] - [시작]
카프카 서비스: CM 홈 → [Kalka] → [시작]
스톰 서비스: Server02에 SSH로 접속해 다음 명령을 실행
$ service storm-nimbus start
$ service storm-supervisor start
$ service storm-ui start
레디스 서비스: Server02에 SSH로 접속해 다음 명령을 실행
$ service redis_6379 start
HBase 서비스: CM 홈 → [HBase] → [시작]

저사양 파일럿 환경: 스마트카 대수를 10 이하로 조정한다.
저사양 환경에서 스마트카 100대로 시뮬레이션 하면, 서버에서 병목 현상과 타임아웃 등의 문제가 발생할 수 있다. 
이를위해 스마트카 대수 옵션을 10 이하로 설정한다.

$ cd /home/pilot-pjt/working
$ java cp bigdata.smartcar.loggen-1.0.jar com.wikibook.bigdata.smartcar. loggen. DriverLogMain 20200322 100 &

스마트카 운전자의 운행 로그 확인
실시간 운행 로그 데이터가 정상적으로 생성됐는지 확인
/home/pilot-pjt/working/driver-realtime-log/에 SmartCarDriverInfo.log 파일이 생성됐을 것이다. 
로그는 24시간을 기준으로 지속적으로 생성된다. tail 명령으로 실시간 로그가 계속 기록되는지 확인해 보자.
$ cd /home/pilot-pjt/working/driver-realtime-log
$ tail -f SmartCarDriverInfo.log


## 스마트카 운전자의 운행 데이터 적재 확인
오늘 날짜의 모든 운행 데이터가 HBase에 정상적으로 적재됐는지 휴를 통해 확인해 보자.

휴에 접속해 [좌측 메뉴 펼치기] -- [LIBase] - [DriverCarInfo] 테이블을 선택해 실행일자(“20200428")의 운행 데이터가 생성됐는지 확인
HBase 브라우저 검색에 실행 일자를 역변환한 로우키의 prefix “00000022300202"를 입력하면 등록된 로우키 목록이 자동 완성되어 나타난다. 
이 가운데 아무 로우키나 선택하고 뒤에 콤마(",")를 입력하고 [검색] 버튼을 클릭하면 해당 로우키 스마트카 운전자의 실시간 운행 정보가 HBase에서 조회된다.

레디스 CLI를 실행해 오늘 날짜로 과속한 스마트카 차량 정보를 확인
로그 시뮬레이터 상황에 따라 아직 과속 차량이 발생하지 않았을 수도 있다.
$ redis-cli
$ 127.0.0.1: 6379) smembers 20200322
과속 차량이 3대 이상 발견되면 스마트카 운전자에 대한 운행 로그 시뮬레이터도 종료시킨다. 
앞서 실행했던 스마트카 상태 정보 로그 시뮬레이터도 강제로 종료한다.
$ ps -ef | grep smartcar.log
$ kill -9 [pid] [pid]

저사양 파일럿 환경: 수집/적재 기능을 정지시킨다.
플럼 서비스: CM 홈 → [Flume] → [정지]
- 카프카 서비스: CM 홈 → [Kafka] → [정지]
스톰 서비스: Server02에 SSH로 접속한 후 다음 명령을 실행
$ service storm-ui stop
$ service storm-supervisor stop
$ service storm-nimbus stop
레디스 서비스: Server02에 SSH로 접속한 후 다음 명령을 실행
$ service redis_6379 stop
HBase 서비스: CM 홈 → [HBase] → [정지]


## 스마트카 상태 정보 모니터링 워크플로 작성

저사양 파일럿 환경: 우지 서비스를 시작한다.
- 우지 서비스: CM 홈 → [Oozie] → [시작]

작업 디렉터리를 만듬
1 휴의 좌측 드롭박스 메뉴에서 [문서 메뉴를 선택해 내 문서 기능을 실행한다.
하이브 스크립트 파일을 저장하기 위한 작업 폴더를 workflow"라는 이름으로 생성한다.
workflow - hive_script - subject1 디렉토리 생성
subject1 
subject2 
subject3 
subject4 
subject5 


## Subject 1
 - 하이브 스크립트 파일 3개를 만든다. 내 문서에서 /workflow/hive_script/subject1 위치로 이동한다. 
 - 파일이름은 create_table_managed_smartcar_status_info.hql (그림 6.69)
 - 파일이름은 alter_partition_smartcar_status_info.hql (그림 6.70)
 - 파일이름은 insert_table_managed_smartcar_status_info.hql (그림 6.71)
 - 워크플로 생성
 - create_table_managed_smartcar_statis_info.hql을 선택한 후 [추가] 버튼을 누른다.
 - alter partition_smartcar_status_info.hal을 선택한 후, [추가] 버튼을 클릭한다.
 - working_day=${today} 매개변수 추가
 - insert_table_managed_smartcar_status_info.hal을 선택한 후, [추가] 버튼을 클릭한다.
 - working_day=${today} 매개변수 추가
 - 워크플로의 이름 지정 "Subject 1 - Workflow"
 - 워크플로우 실행
 - 작동했는지 확인
   select * from managed_smartcar_status_info where biz date = '20200322' limit 19

## Subject 2 스마트카 운전자 운행 기록 정보 워크플로 작성 실습
HBase의 테이블에 적재된 “스마트카 운전자의 운행 데이터를 우지 워크플로를 이용해 하이브의 Managed 영역인 Mart 테이블로 매일 이동시키는 프로세스다. 
기억을 되살려 보면 HBase에 적재된 “스마트카 운전자 운행 데이터”는 하이브의 HBase 핸들러라는 것을 이용해 하이브의 테이블(SmartCar Drive Info)에 연결해서 
하이브의 조회로 확인이 가능했다. 
 - 내 문서: /workflow/hive_script/subject2 이동
 - 하이브 스크립트 파일 4개를 작성한다. 
 - 파일이름은 create_table_smartcar_drive_info_2.hqI (그림 6.97)
 - 파일 이름은 insert_table_smartcar_drive_info_2.hql (그림 6.98)
 - 파일 이름은 create_table_managed_smartcar_drive_info.hql (그림 6.99)
 - 파일 이름은 "insert_table_managed_smartcar_drive_info.hql (그림 6.100)
 - 워크플로 생성
 - create _table_smartcar_drive_info_2hql을 선택한 후 [추가] 버튼을 클릭한다.
 - insert_table_smartcar_drive_info_2hql을 선택한 후 [추가] 버튼을 클릭한다.
 - create_table_managed_smartcar_drive_info.hq을 선택한 후 [추가]버튼을 클릭한다.
 - insert_table_managed_smartcar_drive_info.hql을 선택한 후 [추가] 버튼을 클릭한다.
 - [매개변수를 누르고 working_day의 매개변수에 우지의 예약 스케줄러에서 정의할 ${today} 매개변수를 할당한다.
 - 워크플로의 이름 작성 "Subject 2 - Workflow"로 변경
 - "Subject 2 - Workflow"가 정상적으로 작동됐는지 확인
 - select * from managed_smartcar_status_info where biz date = '20200322' limit 10;


## Subject 3 이상 운전 패턴 스마트카 정보 워크플로 작성 실습
 - /workflow/hive_script/subject3 이동
 - 하이브 스크립트 파일을 두 개 작성한다. 
 - 파일이름은 create_table_managed_smartcar_symptom_info.hql (그림 6.102)
 - 내 문서의 /workflow/hive_script/subject3 위치에 두 번째 하이브 스크립트 파일을 만들어 본다.
 - 파일이름은 insert_table_managed_smartcar_symptom_info.hql (그림 6.103)
 - 워크플로를 생성
 - create_table_managed_ smartcar_symptom_info.hql을 선택한 후 [추가] 버튼을 클릭한다.
 - insert_table_managed_smartcar_symptom_info.hql을 선택한 후 [추가] 버튼을 클릭한다.
 - [매개변수를 누르고 working_day의 매개변수에 우지의 예약 스케줄러에서 정의할 ${today}" 매개변수를 할당한다.
 - 워크플로의 이름 작성 "Subject 3 - Workflow"로 변경한 후 [확인] 버튼을 누른다.
 - 워크플로 작성 완료한다.
 - "Subject 3 - Workflow"가 정상적으로 작동했는지 확인
 - 날짜는 독자들의 파일럿 환경의 biz_date 날짜로 맞춰야 한다.
 - 하이브 쿼리 실행 결과에서 [차트] 버튼을 선택한다.

## Subject4 워크플로 긴급 점검이 필요한 스마트카 정보 워크플로 작성
스마트카의 다양한 센서로부터 수집된 데이터(타이어, 라이트, 브레이크, 엔진, 배터리)를 분석해 긴급 점검이 필요한 스마트카 차량 리스트를 찾아내는 것

 - Subject4에서는 하이브 스크립트 파일 2개를 작성한다. 
 - 내 문서의 /workflow/hive_script/subject4로 이동
 - 하이브 에디터가 나타나면 스마트카 장비의 상태를 관리하기 위한 테이블 생성 스크립트를 작성하고 저장
    파일 이름은 creale_table_managed_smartcar_emergency_check_info.hql(그림6.110)
 - 내 문서의 workflow/hive_script/subject4에 두 번째 하이브 스크립트 파일을 만든다. 
 - 파일 이름은 insert_table_managed_smartcar_emergency_check_info.hql(그림 6.111)
 - 워크플로 생성
 - create_table_smartcar_emergency_check_info.hql을 선택한 후 [추가] 버튼을 클릭한다.
 - insert_table_managed_smartcar_emergency_check_info.hql을 선택한 후 [추가] 버튼을 클릭한다.
 - [매개변수를 누르고 working_day의 매개변수에 우지의 예약 스케줄러에서 정의할 ${today} 매개변수를 할당한다.
 - working day=${today}
 - 워크플로의 이름을 작성 [My Workflow]를 클릭하고, "Subject 4 - Workflow"로 변경
 - Workflow 작성을 완료 한다. 우측 상단의 [저장] 버튼을 클릭한다.
 - "Subject 4 - Workflow"가 정상적으로 작동했는지 확인
    select * from managed_smartcar_emergency_check_info
    where biz_date = '20200322'

## Subject 5. 스마트카 운전자 차량용품 구매 이력 정보 워크플로 작성 

2020년 03월 스마트카 운전자들이 구매한 “스마트카 차량용품 구매 이력”과 “스마트카 마스터 데이터를 결합한 데이터셋을 만들고, 
차량번호별 구매한 상품 리스트를 로컬 파일시템에 생성
 스마트카 차량용품 구매 이력 데이터는 SmartCar Item.Bus List 테이블로 구성돼 있고, 
스마트카 마스터 데이터는 앞서 여러 번 사용했던 SmartCar_Master_Over18 테이블을 이용할 것이다. 

 - 휴 내 문서: /workflow/hive_script/subject5 이동
 - 내 문서의 /workflow/hive_script/subject5 위치로 이동해서 [새 문서] → [Hive 쿼리]를 선택
 - 하이브 에디터가 나타나면 구매 이력을 관리하기 위한 하이브 테이블 생성 스크립트를 그림 6.113처럼 작성하고 저장한다. 
   파일 이름은 create_table_smartcar_item_buylist_info.hql
 - 내 문서의 workllow/hive_script/subjects의 위치에 subject5 디렉터리에서 [새 문서] → [Hive 쿼리를 선택
 - 하이브 에디트 창이 나타나면 동적 파티션을 설정하고 “차량 물품 구매리스트”와 “스마트카 마스터” 데이터를 조인하는 하이브 스크립트를 작성하고 저장
   파일 이름은 insert_table_managed_smartcar_item_buylist_info.hql
 - 하이브 에디트 창이 나타나면 구매한 상품 리스트를 조회해서 로컬 파일시스템의 특정 위치인 "/home/pilot-pit/item-buy-list"에 파일을 생성하는 하이브 스크립트를 작성하고 저장한다. 
   파일 이름은 local_save_managed_smartcar_item_buylist_info.hale getch.
 - 워크플로를 생성
 - create_table_managed_smartcar_item_buylist_info.hql을 선택한 후 [추가] 버튼을 클릭한다.
 - insert_table_managed_smartcar_item_buylist_info.hql을 선택한 후 [추가] 버튼을 누른다.
 - local_save_managed_smartcar_item_buylist_info.hql을 선택한 후 [추가] 버튼을 누른다.
 - 워크플로의 이름을 작성한다. "Subject 5 - Workflow"로 변경
 - "Subject 5 - Workflow"가 정상적으로 작동했는지 확인
   그림 6.116과 같이 하이브 QL을 "biz_month=202003" 조건으로 작성해서 실행

차량 번호별로 용품을 구매한 리스트 파일이 Server02의 로컬 파일 시스템에 생성됐는지 확인한다.
$ more /home/pilot-pjt/item-buy-list/000000_0
